import os
import re
import json
import uuid
import random
import asyncio
import logging
from io import BytesIO
import prettytable as pt
from datetime import datetime, timedelta

from aiogram import types
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import ctx_data
from aiogram.dispatcher.filters import Command, CommandStart, Text
from aiogram.utils import exceptions
from aiogram.utils.markdown import hbold, hcode, hitalic, hunderline, hstrikethrough, hlink

# FILES <
from misc.filters import IsPrivate, IsAdmin
from misc.help import keyboard_gen, chunks_generators, format_number
from misc.callback_data import show_callback, target_callback, token_callback, pagination_callback, tokenUsers_callback, aboutUser_callback, period_callback
from misc.states import StatesBroadcast
# FILES >

def generate_random_token():
	random_uuid = str(uuid.uuid4())
	random_chars = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for _ in range(8))
	token = f'{random_chars}-{random_uuid}'
	return token

#
# OTHER
#

async def page_home(message: types.Message, db, dp, user_info, settings):
	if user_info['is_admin'] == 1:
		keyboard = keyboard_gen([['‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞'], ['‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']])
	else:
		keyboard = keyboard_gen([['üîê –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞'], ['‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['üìã –õ–æ–≥–∏ –æ—à–∏–±–æ–∫', 'üóÉ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É'], ['‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']])
	await message.answer(hbold("üíé " + settings['rights'][user_info['is_admin']] + ", –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."), reply_markup = keyboard)

#
# LOGS
#

async def page_logs(message: types.Message, db, dp, user_info, settings):
	logs_size = os.path.getsize(settings['logs_path'])
	size_kb = round(logs_size / 1024)
	text = "\n".join([
		hbold("üìã –õ–æ–≥–∏ –æ—à–∏–±–æ–∫"),
		"",
		hitalic(settings['logs_path']) + " - " + hbold(str(size_kb) + " –ö–ë") ,
	])

	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥", callback_data = target_callback.new(action = "logs_download")))
	keyboard.add(types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", callback_data = target_callback.new(action = "logs_clean")))
	await message.answer(text = text, reply_markup = keyboard)

async def callback_logs(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	if callback_data['action'] == "logs_download":
		msg = await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = hbold("‚è± –û–∂–∏–¥–∞–π—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))
		if os.path.getsize(settings['logs_path']):
			file = open(settings['logs_path'], 'rb')
			await call.bot.send_document(chat_id = user_info['chat_id'], document = file, caption = "–î–∞—Ç–∞: " + hbold(str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))))
			await call.bot.delete_message(chat_id = user_info['chat_id'], message_id = msg.message_id)
		else:
			await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = hbold("üìã –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –ø—É—Å—Ç—ã!"))
	elif callback_data['action'] == "logs_clean":
		with open(settings['logs_path'], 'w'):
			pass
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = hbold("‚úÖ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã!"))

#
# USERS
#

async def page_users(message: types.Message, db, dp, user_info):
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("üë• –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data = target_callback.new(action = "users_download_all")))
	keyboard.add(types.InlineKeyboardButton("üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data = target_callback.new(action = "users_download_active")))
	await message.answer(text = hbold("üóÉ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É"), reply_markup = keyboard)

async def callback_users(call: types.CallbackQuery, callback_data: dict, db, dp, user_info):
	msg = await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = hbold("‚è± –û–∂–∏–¥–∞–π—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))
	users = await db.get_chat_id_users(True if callback_data['action'] == "users_download_active" else False)
	count = str(len(users))
	chat_ids = "\n".join([str(user['chat_id']) for user in users])
	file = BytesIO()
	file.write(chat_ids.encode())
	file.seek(0)
	file.name = count + '_users.txt'
	text = "\n".join([
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + hbold(count),
		"",
		"–î–∞—Ç–∞: " + hbold(datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
	])
	await call.bot.send_document(chat_id = user_info['chat_id'], document = file, caption = text)
	await call.bot.delete_message(chat_id = user_info['chat_id'], message_id = msg.message_id)
	file.close()

#
# STATISTICS
#

async def page_statistics(message: types.Message, db, dp, user_info):
	msg = await message.answer(hbold("‚è± –û–∂–∏–¥–∞–π—Ç–µ, —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))

	stats_users = await db.get_stats_users()
	hour_users = await db.get_stats_count(table = "users", separator = ">=", date_start = "NOW() - INTERVAL 1 HOUR")
	day_users = await db.get_stats_count(table = "users", separator = ">=", date_start = "NOW() - INTERVAL 1 DAY")
	action_day_users = await db.get_stats_count(table = "users", separator = ">=", date_last_action = "NOW() - INTERVAL 1 DAY")
	action = await db.get_stats_count(table = "users", kicked = "0")
	kicked = await db.get_stats_count(table = "users", kicked = "1")
	admins = await db.get_stats_count(table = "users", separator = ">=", is_admin = "1")

	day_users_procent = (day_users['count'] / stats_users['all_users']) * 100
	action_day_users_procent = (action_day_users['count'] / stats_users['all_users']) * 100
	action_procent = (action['count'] / stats_users['all_users']) * 100
	kicked_procent = (kicked['count'] / stats_users['all_users']) * 100

	text = "\n".join([
		hbold("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
		"",
		"–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + hbold(format_number(stats_users['all_users'])) + hitalic(" —á–µ–ª."),
		"",
		hbold("–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
		hitalic("‚ñ™Ô∏è –Ω–æ–≤—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ") + hbold(format_number(hour_users['count'])) + hitalic(" —á–µ–ª."),
		hitalic("‚ñ™Ô∏è –Ω–æ–≤—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ") + hbold(format_number(day_users['count'])) + hitalic(" —á–µ–ª.") + hitalic(" (" + str(round(day_users_procent, 2)) + "%)"),
		hitalic("‚ñ™Ô∏è –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º –∑–∞ 24 —á–∞—Å–∞: ") + hbold(format_number(action_day_users['count'])) + hitalic(" —á–µ–ª.") + hitalic(" (" + str(round(action_day_users_procent, 2)) + "%)"),
		hitalic("‚ñ™Ô∏è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ—Ç–æ–º: ") + hbold(format_number(action['count'])) + hitalic(" —á–µ–ª.") + hitalic(" (" + str(round(action_procent, 2)) + "%)"),
		hitalic("‚ñ™Ô∏è –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–æ—Ç–∞: ") + hbold(format_number(kicked['count'])) + hitalic(" —á–µ–ª.") + hitalic(" (" + str(round(kicked_procent, 2)) + "%)"),
		"",
		hbold("–û–±—â–µ–µ –∫–æ–ª-–≤–æ"),
		hitalic("‚ñ´Ô∏è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ") + hbold(format_number(admins['count'])) + hitalic(" —á–µ–ª."),
	])

	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data = show_callback.new(action = "admins")))
	await message.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = text, reply_markup = keyboard)

async def callback_show_admins(call: types.CallbackQuery, callback_data: dict, db, dp, settings):
	admins = await db.get_is_admin_users()
	text = "üìÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (" + str(len(admins)) + ")\n\n"
	text += "\n".join([admin['fullname'] + " - " + settings['rights'][admin['is_admin']] for admin in admins])
	await call.bot.answer_callback_query(callback_query_id = call.id, text = text, cache_time = 0, show_alert = True)


#
# ACCESS TOKENS
#

async def page_access_token(message: types.Message, db, dp, user_info, settings):
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("üóÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data = token_callback.new(action = "show", id = 'None')))
	keyboard.add(types.InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω", callback_data = token_callback.new(action = "create", id = 'None')))
	
	text = '\n'.join([
		hbold("‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"),
		"",
		"‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
		])
	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard)

async def create_token_lists(db, user_info, p = 0):
	array = list(chunks_generators(await db.get_all_tokens(), 10))
	pages = len(array)
	pages_count = str(pages - 1)
	keyboard = types.InlineKeyboardMarkup()
	for item in array[p]:
		indicator = " üü¢" if await db.get_tokenUsers(id = item['id']) else " üîò"
		keyboard.add(
				types.InlineKeyboardButton('üÜî: ' + str(item['id']) + "   " + item['token'].split('-')[0] + "...." + item['token'].split('-')[-1][:6] + indicator, callback_data = token_callback.new(action = "about", id = item['id'])))
	keyboard.add(
		types.InlineKeyboardButton("‚óÄÔ∏è", callback_data = pagination_callback.new(action = 'left', page = p, all_pages = pages_count)),
		types.InlineKeyboardButton(f"{p + 1} / " + str(pages), callback_data = pagination_callback.new(action = 'count', page = 0, all_pages = pages_count)),
		types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data = pagination_callback.new(action = 'right', page = p, all_pages = pages_count))
			)
	return keyboard

async def show_tokens_list(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	tokens = await db.get_all_tokens()
	if tokens:
		try:
			await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = hbold("üóÇ –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ | –í—Å–µ–≥–æ ("+ str(len(tokens)) +")"), reply_markup = await create_token_lists(db, user_info))
		except:
			await call.bot.send_message(chat_id = user_info['chat_id'], text = hbold("üóÇ –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ | –í—Å–µ–≥–æ ("+ str(len(tokens)) +")"), reply_markup = await create_token_lists(db, user_info))
	else:
		text = '\n'.join([
			"–¢–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è",
			"",
			"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω",
			])
		await call.bot.answer_callback_query(callback_query_id = call.id, text = text, cache_time = 0, show_alert = True)

async def about_token(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	if callback_data['action'] == "about":
		token_info = await db.get_tokenInfo(id = callback_data['id'])
		token_users = await db.get_tokenUsers(id = callback_data['id'])
		
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "show", id = 'None')))
		keyboard.add(types.InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è", callback_data = token_callback.new(action = "edit_time", id = callback_data['id'])))
		if token_users:
			keyboard.add(types.InlineKeyboardButton("üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data = tokenUsers_callback.new(id = callback_data['id'])))
		keyboard.insert(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data = token_callback.new(action = "attention", id = callback_data['id'])))

		text = '\n'.join([
			hbold("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Ç–æ–∫–µ–Ω–µ"),
			"",
			"üÜî: " + str(token_info['id']),
			"#Ô∏è‚É£  –¢–æ–∫–µ–Ω: " + hitalic("(click to copy)\n") + str(hcode(token_info['token'])),
			"üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –î–ê" if token_users else "üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –ù–ï–¢",
			"",
			"üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + hitalic(str(token_info['create_time'])),
			"‚è≥ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: " + str(token_info['time_death'].strftime('%Y-%m-%d')),
			"",
			])
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard)

async def edit_time_live_token(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	text = '\n'.join([
		hbold("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥"),
		])
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data = period_callback.new(period = "7", id = callback_data['id'])),
				types.InlineKeyboardButton("10 –¥–Ω–µ–π", callback_data = period_callback.new(period = "10", id = callback_data['id'])),
				types.InlineKeyboardButton("20 –¥–Ω–µ–π", callback_data = period_callback.new(period = "20", id = callback_data['id'])),
				types.InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data = period_callback.new(period = "30", id = callback_data['id'])))
	keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "about", id = callback_data['id'])))
	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard)

async def update_time_live_token(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	token_info = await db.get_tokenInfo(id = callback_data['id'])
	new_time = token_info['time_death'] + timedelta(days = int(callback_data['period']))
	await db.update_time_live_token(id = callback_data['id'], datetime = new_time)
	await call.bot.answer_callback_query(callback_query_id = call.id, text = "‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ", cache_time = 0, show_alert = True)
	token_info = await db.get_tokenInfo(id = callback_data['id'])
	token_users = await db.get_tokenUsers(id = callback_data['id'])
	
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "show", id = 'None')))
	keyboard.add(types.InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è", callback_data = token_callback.new(action = "edit_time", id = callback_data['id'])))
	if token_users:
		keyboard.add(types.InlineKeyboardButton("üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data = tokenUsers_callback.new(id = callback_data['id'])))
	keyboard.insert(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data = token_callback.new(action = "attention", id = callback_data['id'])))

	text = '\n'.join([
		hbold("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Ç–æ–∫–µ–Ω–µ"),
		"",
		"üÜî: " + str(token_info['id']),
		"#Ô∏è‚É£  –¢–æ–∫–µ–Ω: " + hitalic("(click to copy)\n") + str(hcode(token_info['token'])),
		"üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –î–ê" if token_users else "üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –ù–ï–¢",
		"",
		"üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + hitalic(str(token_info['create_time'])),
		"‚è≥ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: " + str(token_info['time_death'].strftime('%Y-%m-%d')),
		"",
		])
	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard)

async def delete_token(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	if callback_data['action'] == "attention":
		token_info = await db.get_tokenInfo(id = callback_data['id'])
		token_users = await db.get_tokenUsers(id = callback_data['id'])
		
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "show", id = 'None')))
		if token_users:
			keyboard.add(types.InlineKeyboardButton("üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data = tokenUsers_callback.new(id = callback_data['id'])))
		keyboard.insert(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data = token_callback.new(action = "delete", id = callback_data['id'])))

		now = datetime.now()
		time_live = now - token_info['create_time'] 

		text = '\n'.join([
			hbold("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —Ç–æ–∫–µ–Ω–µ"),
			"",
			"üÜî: " + str(token_info['id']),
			"#Ô∏è‚É£  –¢–æ–∫–µ–Ω: " + hitalic("(click to copy)\n") + str(hcode(token_info['token'])),
			"üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –î–ê" if token_users else "üì≤ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –ù–ï–¢",
			"",
			"üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + hitalic(str(token_info['create_time'])),
			"‚è≥ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: " + str(token_info['time_death']),
			"",
			])
		await call.bot.answer_callback_query(callback_query_id = call.id, text = "‚ùóÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! ‚ùóÔ∏è\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑", cache_time = 0, show_alert = True)
		await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard)
	elif callback_data['action'] == "delete":
		token_info = await db.get_tokenInfo(id = callback_data['id'])
		token_users = await db.get_tokenUsers(id = callback_data['id'])
		await db.delete_token(id = callback_data['id'])
		try:
			await db.delete_settings(token = token_info['token'])
			await db.update_user_tokenID(token_id = 0, chat_id = token_users['chat_id'])
		except:
			pass
		await call.bot.answer_callback_query(callback_query_id = call.id, text = "‚ôªÔ∏è –¢–û–ö–ï–ù –£–î–ê–õ–Å–ù ‚ôªÔ∏è", cache_time = 0, show_alert = True)
		await call.bot.send_message(chat_id = token_users['chat_id'], text = hbold("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"))
		await call.bot.delete_message(chat_id = user_info['chat_id'], message_id = call.message.message_id)
		await show_tokens_list(call, callback_data, db, dp, user_info, settings)
		return

async def tokenUsers_list(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	token_users = await db.get_tokenUsers(id = callback_data['id'])
	keyboard = types.InlineKeyboardMarkup()
	for user in token_users:
		keyboard.add(types.InlineKeyboardButton("üë§ " + str(user['username']), callback_data = aboutUser_callback.new(chatID = user['chat_id'])))
	keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "about", id = callback_data['id'])))

	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = "–ö—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–æ–∫–µ–Ω:", reply_markup = keyboard)

async def about_user(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	user = await db.get_info_user(chat_id = callback_data['chatID'])
	keyboard = types.InlineKeyboardMarkup()
	if user['username']:
		keyboard.add(types.InlineKeyboardButton("üë§ " + str(user['fullname']), url = "https://t.me/" + user['username']))
	keyboard.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data = token_callback.new(action = "about", id = user_info['token_id'])))
	text = '\n'.join([
		"‚ñ™Ô∏è ID: " + hcode(str(user['chat_id'])),
		"‚ñ™Ô∏è Fullname: " + hcode(str(user['fullname'])),
		"‚ñ™Ô∏è Username: @" + str(user['username']),
		"",
		"‚ñ™Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: " + hcode(str(user['date_start'])),
		"‚ñ™Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + hcode(str(user['date_last_action'])),
		])

	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = text, reply_markup = keyboard)

async def create_new_token(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	msg = await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = call.message.message_id, text = "‚å®Ô∏è", reply_markup = None)
	token = generate_random_token()

	time_now = datetime.now()
	time_die_token = time_now + timedelta(days = 30)

	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton("üóÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data = token_callback.new(action = "show", id = 'None')))
	text = '\n'.join([
		hbold("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"),
		"",
		"#Ô∏è‚É£  " + hcode(str(token)),
		hitalic("(click to copy)\n"),
		"",
		"‚åöÔ∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + hcode(str(time_now.strftime('%Y-%m-%d %H:%M:%S'))),
		"‚åöÔ∏è –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: " + hcode(str(time_die_token.strftime('%Y-%m-%d'))),
		])
	await db.add_new_token(token = token, time_die = time_die_token.strftime('%Y-%m-%d %H:%M:%S'))
	await asyncio.sleep(2)
	await call.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = text, reply_markup = keyboard)

async def callback_pagination(call: types.CallbackQuery, callback_data: dict, db, dp, user_info, settings):
	if callback_data['action'] == "count":
		await call.bot.answer_callback_query(callback_query_id = call.id, text = '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü üòá', cache_time = 0, show_alert = True)
		return
	if callback_data['action'] == "left":
		if callback_data['page'] == "0":
			await call.bot.delete_message(chat_id = user_info['chat_id'], message_id = call.message.message_id)
			await page_access_token(call, db, dp, user_info, settings)
		markup = await create_token_lists(db, user_info, int(callback_data['page']) - 1)
	elif callback_data['action'] == "right":
		if callback_data['page'] == callback_data['all_pages']:
			await call.bot.answer_callback_query(callback_query_id = call.id, text = '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç—É üôÑ', cache_time = 0, show_alert = True)
			return
		markup = await create_token_lists(db, user_info, int(callback_data['page']) + 1)

	await call.bot.edit_message_text(
		chat_id			= user_info['chat_id'],
		message_id		= call.message.message_id,
		text			= hbold("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"),
		reply_markup	= markup
		)

#
# BROADCAST
#

async def page_broadcast(message: types.Message, db, dp, user_info, settings, broadcast):
	if broadcast.status == "available" or broadcast.status == "stopped":
		text = hbold("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
		keyboard = keyboard_gen([['‚úâÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']])
	elif broadcast.status == "launched":
		text = "\n".join([
			hbold("‚è≥ –°–µ–π—á–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞"),
			"",
			hitalic("üîÑ –û—Å—Ç–∞–ª–æ—Å—å: ") + hbold(broadcast.stats_left),
			hitalic("‚úÖ –£—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_success),
			hitalic("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_fail),
			"",
			hitalic("‚è± –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ") + hbold(str(datetime.now() - broadcast.timer['date_start']).split(".")[0]),
			"",
			hbold("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"),
			hitalic("/edit - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
			hitalic("/stop - —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
		])
		keyboard = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']])
	elif broadcast.status == "waiting":
		text = "\n".join([
			hbold("‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞ –Ω–∞: ") + hitalic(broadcast.timer['date']),
			"",
			hbold("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"),
			hitalic("/cancel - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
		])

		keyboard = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']])
	await message.answer(text = text, reply_markup = keyboard)
	await StatesBroadcast.action.set()

async def page_broadcast_action(message: types.Message, db, dp, user_info, settings, broadcast, state: FSMContext):
	if message.content_type in ["text"]:
		if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
			await state.finish()
			await page_home(message, db, dp, user_info, settings)
			return
		elif message.text == "‚úâÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
			if broadcast.status == "available":
				await message.answer(text = hbold("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), reply_markup = keyboard_gen([['‚õîÔ∏è –û—Ç–º–µ–Ω–∞']]))
				await StatesBroadcast.message.set()
			else:
				await state.finish()
				await message.answer(text = hbold("‚ùóÔ∏è –ó–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç"), reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))
		elif message.text == "/edit":
			if broadcast.status == "launched":
				await state.update_data(edit = True)
				await message.answer(text = hbold("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), reply_markup = keyboard_gen([['‚õîÔ∏è –û—Ç–º–µ–Ω–∞']]))
				await StatesBroadcast.message.set()
			else:
				await state.finish()
				await message.answer(text = hbold("‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"), reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))
		elif message.text == "/stop" or message.text == "/cancel":
			await state.finish()
			broadcast.status = "stopped"
		else:
			await message.answer(text = hbold("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"))
	else:
		await message.answer(text = hbold("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"))

async def page_broadcast_message(message: types.Message, db, dp, user_info, settings, broadcast, state: FSMContext):
	if message.content_type in ["text"]:
		if message.text == "‚õîÔ∏è –û—Ç–º–µ–Ω–∞":
			await state.finish()
			await page_broadcast(message, db, dp, user_info, settings, broadcast)
			return
	
	await state.update_data(message = message, preview = True) if not (await state.get_data()).get("message") else None

	state_data = await state.get_data()
	msgObject = state_data.get("message")
	msgKeyboard = state_data.get("keyboard")
	msgTimer = state_data.get("timer")
	msgEdit = state_data.get("edit")
	msgPreview = state_data.get("preview")
	preview_url = [entities for entities in msgObject.entities if "url" in str(entities)]

	text = "\n".join([
		hbold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:"),
		"",
		hitalic(" ‚ñ´Ô∏è –ö–Ω–æ–ø–∫–∏: ") + hbold("–µ—Å—Ç—å" if msgKeyboard else "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –ø–æ—Å—Ç—É" if msgObject and "reply_markup" in msgObject else "–Ω–µ—Ç—É"),
		hitalic(" ‚ñ´Ô∏è –¢–∞–π–º–µ—Ä: ") + hbold(msgTimer['date'] if msgTimer else "–Ω–µ—Ç—É"),
		(hitalic(" ‚ñ´Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫: ") + hbold("–≤—ã–∫–ª" if msgPreview else "–≤–∫–ª") + hitalic(" (/preview - –∏–∑–º–µ–Ω–∏—Ç—å)") + "\n") if len(preview_url) else "",
		hitalic(" ‚ùï –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å \"–ö–Ω–æ–ø–∫–∏/–¢–∞–π–º–µ—Ä\" –Ω–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		hitalic(" ‚ùï –í –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å") if msgObject and "reply_markup" in msgObject else ""
	])

	if msgEdit:
		keyboard = keyboard_gen([['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', 'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'], ['‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å'], ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']])
	else:
		keyboard = keyboard_gen([['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', 'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'], ['‚è± –¢–∞–π–º–µ—Ä', '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å'], ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']])
	await message.answer(text = text, reply_markup = keyboard)
	await StatesBroadcast.editor.set()

async def page_broadcast_editor(message: types.Message, db, dp, user_info, settings, broadcast, telegram, state: FSMContext):
	if message.content_type in ["text"]:
		state_data = await state.get_data()
		msgObject = state_data.get("message")
		msgKeyboard = state_data.get("keyboard")
		msgEdit = state_data.get("edit")
		msgPreview = state_data.get("preview")

		if message.text in "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏":
			text = "\n".join([
				hbold("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏"),
				"",
				hitalic("‚ùï –§–æ—Ä–º–∞—Ç: ") + hbold("–¢–µ–∫—Å—Ç - —Å—Å—ã–ª–∫–∞ | –¢–µ–∫—Å—Ç - —Å—Å—ã–ª–∫–∞"),
			])
			await message.answer(text = text, reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))
			await StatesBroadcast.keyboard.set()
		elif message.text in "‚è± –¢–∞–π–º–µ—Ä" and not msgEdit:
			text = "\n".join([
				hbold("‚è± –¢–∞–π–º–µ—Ä"),
				"",
				hitalic("‚ùï –§–æ—Ä–º–∞—Ç: ") + hbold("2025-12-01 10:00"),
			])
			await message.answer(text = text, reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))
			await StatesBroadcast.timeout.set()
		elif message.text in "üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä":
			try:
				await msgObject.send_copy(chat_id = user_info['chat_id'], reply_markup = msgKeyboard, disable_web_page_preview = msgPreview)
			except:
				await message.answer(text = hbold("‚ùóÔ∏è –í –∫–Ω–æ–ø–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏"))
		elif message.text in "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
			if msgEdit:
				await state.finish()
				broadcast.message = msgObject
				broadcast.keyboard = msgKeyboard
				await message.answer(text = hbold("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!"), reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))
			else:
				await broadcast_run(message, db, dp, user_info, settings, broadcast, telegram, state)
		elif message.text in "/preview":
			if msgPreview:
				await state.update_data(preview = False)
			else:
				await state.update_data(preview = True)
			await page_broadcast_message(message, db, dp, user_info, settings, broadcast,  state)
		elif message.text in "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
			await state.finish()
			await page_broadcast(message, db, dp, user_info, settings, broadcast)
			return
		else:
			await message.answer(text = hbold("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"))
	else:
		await message.answer(text = hbold("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"))

async def page_broadcast_keyboard(message: types.Message, db, dp, user_info, settings, broadcast, state: FSMContext):
	if message.content_type in ["text"]:
		if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
			await state.update_data(keyboard = None) if (await state.get_data()).get("keyboard") else None
			await page_broadcast_message(message, db, dp, user_info, settings, broadcast,  state)
			return
	try:
		keyboard = types.InlineKeyboardMarkup()
		text_buttons = list(filter(None, message.text.split("\n")))
		for text_button in text_buttons:
			more = []
			buttons = text_button.split("|")
			for button in buttons:
				params = button.strip().split("-")
				more.append(types.InlineKeyboardButton(params[0].strip(), url = params[1].strip()))
			keyboard.add(*more)
		await state.update_data(keyboard = keyboard)
		await page_broadcast_message(message, db, dp, user_info, settings, broadcast,  state)
	except Exception as e:
		await message.answer(text = hbold("‚ùóÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"))

async def page_broadcast_timeout(message: types.Message, db, dp, user_info, settings, broadcast, telegram, state: FSMContext):
	if message.content_type in ["text"]:
		if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
			await state.update_data(timer = None) if (await state.get_data()).get("timer") else None
			await page_broadcast_message(message, db, dp, user_info, settings, broadcast,  state)
			return
	try:
		date = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
		seconds_left = int(date.timestamp()) - int(datetime.now().timestamp())
		if seconds_left <= 0:
			await message.answer(text = hbold("‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."))
			return
		await state.update_data(timer = {"date": date, "seconds_left": seconds_left})
		await page_broadcast_message(message, db, dp, user_info, settings, broadcast,  state)
	except Exception as e:
		await message.answer(text = hbold("‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."))

async def broadcast_notify(message, action):
	try:
		data = ctx_data.get()
		user_info = data.get('user_info')
		settings = data.get('settings')
		broadcast = data.get('broadcast')
		telegram = data.get('telegram')

		if action == "channel_message":
			broadcast.channel_message = await broadcast.message.send_copy(chat_id = settings['broadcast_channel'], reply_markup = broadcast.keyboard, disable_web_page_preview = broadcast.preview)
			return
		elif action == "launched":
			text = hbold("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
		elif action == "waiting":
			text = hbold("‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞ –Ω–∞: ") + hitalic(broadcast.timer['date'])
		elif action == "waiting_stop":
			text = hbold("‚õîÔ∏è –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
		elif action == "stopped":
			text = "\n".join([
				hbold("‚õîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"),
				"",
				hitalic("üîÑ –û—Å—Ç–∞–ª–æ—Å—å: ") + hbold(broadcast.stats_left),
				hitalic("‚úÖ –£—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_success),
				hitalic("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_fail),
			])
		elif action == "finish":
			text = "\n".join([
				hbold("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"),
				"",
				hitalic("‚úÖ –£—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_success),
				hitalic("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ") + hbold(broadcast.stats_fail),
				"",
				hitalic("‚è± –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–Ω—è–ª–æ: ") + hbold(str(datetime.now() - broadcast.timer['date_start']).split(".")[0]),
			])

		await message.answer(text, reply_markup = (keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]) if action != "finish" else None))

		text += hitalic("\n\nü§ñ –ë–æ—Ç: @" + telegram['username'])
		text += hitalic("\nüë§ –ó–∞–ø—É—Å—Ç–∏–ª: ") + hbold(user_info['fullname'])
		await message.bot.send_message(chat_id = settings['broadcast_channel'], reply_to_message_id = broadcast.channel_message.message_id, text = text)
	except Exception as e:
		pass

async def broadcast_sm(chat_id, broadcast):
	try:
		await broadcast.message.send_copy(chat_id = chat_id, reply_markup = broadcast.keyboard, disable_web_page_preview = broadcast.preview)
	except exceptions.RetryAfter as e:
		await asyncio.sleep(e.timeout)
		logging.exception(f'"| Broadcast RetryAfter | - (chat_id: {str(chat_id)}, ERROR: {str(e)}, Broadcast: {str(broadcast.__dict__)})\n\n')
		return await broadcast_sm(chat_id, broadcast)
	except Exception as e:
		broadcast.stats_fail += 1
	else:
		broadcast.stats_success += 1
	broadcast.stats_left -= 1

async def broadcast_run(message: types.Message, db, dp, user_info, settings, broadcast, telegram, state: FSMContext):
	if broadcast.status == "available":
		state_data = await state.get_data()
		if state_data.get("timer"):
			if int(state_data.get("timer")['date'].timestamp()) - int(datetime.now().timestamp()) <= 0:
				await message.answer(text = hbold("‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."))
				return
		await state.finish()

		broadcast.message = state_data.get("message")
		broadcast.keyboard = state_data.get("keyboard")
		broadcast.timer = state_data.get("timer")
		broadcast.preview = state_data.get("preview")

		await broadcast_notify(message, action = "channel_message")

		if broadcast.timer and broadcast.timer['seconds_left']:
			await broadcast_notify(message, action = "waiting")
			broadcast.status = "waiting"
			for i in range(broadcast.timer['seconds_left']):
				if broadcast.status == "stopped":
					await broadcast_notify(message, action = "waiting_stop")
					broadcast.declare_variables()
					return
				await asyncio.sleep(1)
		
		users = await db.get_chat_id_users(True)
		broadcast.stats_left = len(users)
		if broadcast.timer:
			broadcast.timer.update({"date_start": datetime.now()})
		else:
			broadcast.timer = {"date_start": datetime.now()}

		await broadcast_notify(message, action = "launched")
		broadcast.status = "launched"

		packs = list(chunks_generators(users, settings['broadcast_threads']))

		for users in packs:
			tasks = []
			if broadcast.status == "stopped":
				await broadcast_notify(message, action = "stopped")
				broadcast.declare_variables()
				return
			for user in users:
				tasks.append(asyncio.create_task(broadcast_sm(user['chat_id'], broadcast)))
			await asyncio.gather(*tasks)
			await asyncio.sleep(settings['broadcast_timeout'])

		await broadcast_notify(message, action = "finish")
		broadcast.declare_variables()
	else:
		await state.finish()
		await message.answer(text = hbold("‚ùóÔ∏è –ó–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç"), reply_markup = keyboard_gen([['‚óÄÔ∏è –ù–∞–∑–∞–¥']]))

def register_admin(dp: Dispatcher):
	# OTHER
	dp.register_message_handler(page_home, IsPrivate(), IsAdmin(1), Text(equals = ["‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "‚óÄÔ∏è –ù–∞–∑–∞–¥"], ignore_case = True))

	# LOGS
	dp.register_message_handler(page_logs, IsPrivate(), IsAdmin(), text = "üìã –õ–æ–≥–∏ –æ—à–∏–±–æ–∫")
	dp.register_callback_query_handler(callback_logs, target_callback.filter(action = ["logs_download", "logs_clean"]))

	# USERS
	dp.register_message_handler(page_users, IsPrivate(), IsAdmin(), text = "üóÉ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É")
	dp.register_callback_query_handler(callback_users, target_callback.filter(action = ["users_download_all", "users_download_active"]))

	# STATISTICS
	dp.register_message_handler(page_statistics, IsPrivate(), IsAdmin(), text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
	dp.register_callback_query_handler(callback_show_admins, show_callback.filter(action = "admins"))

	# ACCESS TOKEN
	dp.register_message_handler(page_access_token, IsPrivate(), IsAdmin(), text = "üîê –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞")
	dp.register_callback_query_handler(show_tokens_list, token_callback.filter(action = "show"))
	dp.register_callback_query_handler(about_token, token_callback.filter(action = "about"))
	dp.register_callback_query_handler(edit_time_live_token, token_callback.filter(action = "edit_time"))
	dp.register_callback_query_handler(update_time_live_token, period_callback.filter())
	dp.register_callback_query_handler(delete_token, token_callback.filter(action = ["attention", "delete"]))
	dp.register_callback_query_handler(tokenUsers_list, tokenUsers_callback.filter())
	dp.register_callback_query_handler(about_user, aboutUser_callback.filter())
	dp.register_callback_query_handler(create_new_token, token_callback.filter(action = "create"))
	dp.register_callback_query_handler(callback_pagination, pagination_callback.filter())


	# BROADCAST
	dp.register_message_handler(page_broadcast, IsPrivate(), IsAdmin(1), text = "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞")
	dp.register_message_handler(page_broadcast_action, IsPrivate(), IsAdmin(1), state = StatesBroadcast.action, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(page_broadcast_message, IsPrivate(), IsAdmin(1), state = StatesBroadcast.message, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(page_broadcast_editor, IsPrivate(), IsAdmin(1), state = StatesBroadcast.editor, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(page_broadcast_keyboard, IsPrivate(), IsAdmin(1), state = StatesBroadcast.keyboard, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(page_broadcast_timeout, IsPrivate(), IsAdmin(1), state = StatesBroadcast.timeout, content_types = types.ContentTypes.ANY)
	
# dev t.me/cayse
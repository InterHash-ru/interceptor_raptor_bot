import os
import io
import re
import ast
import json
import asyncio
from datetime import datetime, timedelta

from aiogram import types
from aiogram import Dispatcher
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart, Text
from aiogram.utils.markdown import hbold, hcode, hitalic, hunderline, hstrikethrough, hlink
from aiogram.utils.deep_linking import get_start_link

# FILES <
from misc.help import keyboard_gen, format_number
from misc.filters import IsPrivate, IsAdmin
from misc.states import StatesActivate, StatesRun, StatesEditValue
# FILES >

from telethon.sync import TelegramClient, events
from telethon.tl.functions.channels import JoinChannelRequest

#
# HELP FUNC
#

async def is_valid_token(token):
	pattern = r'^[a-z0-9]{8}-[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$'
	return bool(re.match(pattern, token))

async def is_valid_url(message):
	if all('https://t.me/' in url for url in message):
		return True
	else:
		return False

async def is_valid_ID(message):
	pattern = r'^-\d{10,13}$'
	seen_ids = set()
	for item in message:
		if re.match(pattern, item):
			if item in seen_ids:
				return False
			seen_ids.add(item)
		else:
			return False
	return True

async def check_rights_bot(list_id, message):
	active_chats = []
	for chat_id in list_id:
		try:
			chat = await message.bot.get_chat(chat_id)
			active_chats.append(chat)
		except Exception:
			continue
	if active_chats:
		return active_chats
	else:
		return False

async def check_key_word(message, bot_conf):
	key_word = ast.literal_eval(bot_conf['key_word'])
	keyStop_word = ast.literal_eval(bot_conf['keyStop_word'])
	
	cleaned_message = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å]', ' ', message)
	words = cleaned_message.split()
	unique_array = set()
	for word in words:
		if word.lower() in keyStop_word:
			return False
		if word.lower() in key_word:
			unique_array.add("#" + word.lower())
	
	return list(unique_array)

async def uniqueness_check(chat_id, unique_users, settings_id):
	if unique_users:
		for item in unique_users:
			if item['chat_id'] == chat_id and item['settings_id'] == settings_id:
				return False
		return True
	else:
		return True

#
# HANDLERS USERS
#

async def command_start(message: types.Message, db, dp, user_info, telegram):
	if user_info['token_id']:
		if user_info['active'] == 0:
			conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
			if conf:
				conf['tracked_groups'] = ast.literal_eval(conf['tracked_groups'])
				conf['chats_for_transfer'] = ast.literal_eval(conf['chats_for_transfer'])
				conf['key_word'] = ast.literal_eval(conf['key_word'])
				conf['keyStop_word'] = ast.literal_eval(conf['keyStop_word'])
				text = '\n'.join([
					hbold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞"),
					"",
					"üì§ –û—Ç–∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è:",
					"\n".join(hcode(str(group)) for group in conf['tracked_groups']),
					"üì• –ö—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å:",
					" ".join(hcode(str(chatID)) for chatID in conf['chats_for_transfer']),
					"",
					"üîé –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - " + hcode("".join(str(len(conf['key_word'])))) + hitalic(' —Å–ª–æ–≤'),
					"üõë –°–ø–∏—Å–æ–∫ –∫–ª—é—á.—Å—Ç–æ–ø-—Å–ª–æ–≤ - " + hcode("".join(str(len(conf['keyStop_word'])))) + hitalic(' —Å–ª–æ–≤'),
					"",
					"ü§ñ –°–µ—Å—Å–∏—è –ö–ª–∏–µ–Ω—Ç–∞ - " + hcode(str(conf['session_file'])),
					"",
					"üÜî API_ID: " + hcode(str(conf['api_id'])),
					"#Ô∏è‚É£ API_HASH: " + hcode(str(conf['api_hash'])),
						])

				await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç'], ['üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏']], user_info['is_admin']))
		elif user_info['active'] == 1:
			await show_running(message, db, dp, user_info, telegram)
	else:
		text = "\n".join([
			"üëã –ü—Ä–∏–≤–µ—Ç, " + hbold(user_info['username'] if user_info['username'] else user_info['fullname']) + "!",
			"",
			"ü•∑ –≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ –ø–æ –Ω—É–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º",
			"üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
		])
		await message.bot.send_message(user_info['chat_id'], text = text, reply_markup = keyboard_gen([['üîê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']], user_info['is_admin']), disable_web_page_preview = True)

async def show_running(message: types.Message, db, dp, user_info, telegram):
	conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
	if conf:
		conf['tracked_groups'] = ast.literal_eval(conf['tracked_groups'])
		conf['chats_for_transfer'] = ast.literal_eval(conf['chats_for_transfer'])
		conf['key_word'] = ast.literal_eval(conf['key_word'])
		conf['keyStop_word'] = ast.literal_eval(conf['keyStop_word'])
		status = hbold("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç") if user_info['active'] else hbold("‚è∏ –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		text = '\n'.join([
			status,
			"",
			"üì§ –ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è:",
			"\n".join(hcode(str(group)) for group in conf['tracked_groups']),
			"üì• –ö—É–¥–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–∏–≤–∞–µ—Ç:",
			" ".join(hcode(str(chatID)) for chatID in conf['chats_for_transfer']),
			"",
			"üîé –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - " + hcode("".join(str(len(conf['key_word'])))) + hitalic(' —Å–ª–æ–≤'),
			"üõë –°–ø–∏—Å–æ–∫ –∫–ª—é—á.—Å—Ç–æ–ø-—Å–ª–æ–≤ - " + hcode("".join(str(len(conf['keyStop_word'])))) + hitalic(' —Å–ª–æ–≤'),
			"",
			"ü§ñ –°–µ—Å—Å–∏—è –ö–ª–∏–µ–Ω—Ç–∞ - " + hcode(str(conf['session_file'])),
			"",
			"üÜî API_ID: " + hcode(str(conf['api_id'])),
			"#Ô∏è‚É£ API_HASH: " + hcode(str(conf['api_hash'])),
				])
		if user_info['active']:
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É'],['üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏']], user_info['is_admin']))
		else:
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç'],['üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏']], user_info['is_admin']))

async def settings_bot(message: types.Message, db, dp, user_info, settings, state: FSMContext):
	conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
	
	conf['tracked_groups'] = ast.literal_eval(conf['tracked_groups'])
	conf['chats_for_transfer'] = ast.literal_eval(conf['chats_for_transfer'])
	conf['key_word'] = ast.literal_eval(conf['key_word'])
	conf['keyStop_word'] = ast.literal_eval(conf['keyStop_word'])
	
	text = '\n'.join([
		hbold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ") + str(conf['session_file']),
		"",
		"üì§ –û—Ç–∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è:",
		"\n".join(hcode(str(group)) for group in conf['tracked_groups']),
		"üì• –ö—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å:",
		" ".join(hcode(str(chatID)) for chatID in conf['chats_for_transfer']),
		"",
		"üîé –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - " + hcode("".join(str(len(conf['key_word'])))) + hitalic(' —Å–ª–æ–≤'),
		"üõë –°–ø–∏—Å–æ–∫ –∫–ª—é—á.—Å—Ç–æ–ø-—Å–ª–æ–≤ - " + hcode("".join(str(len(conf['keyStop_word'])))) + hitalic(' —Å–ª–æ–≤'),
		])

	text_two = '\n'.join([
		hbold("–ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ –º–æ–∂–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –±–æ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã"),
		"",
		hitalic("‚ùï –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–≤–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"),
		"",
		"‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
		])

	await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
	await message.bot.send_message(chat_id = user_info['chat_id'], text = text_two, reply_markup = keyboard_gen([['‚ñ™Ô∏è –û—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å','‚ñ™Ô∏è –ö—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å'],['‚ñ™Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤','‚ñ™Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á-—Å—Ç–æ–ø-—Å–ª–æ–≤']], user_info['is_admin']))

async def edit_tracked_groups(message: types.Message, db, dp, user_info, settings, state: FSMContext):
	text = '\n'.join([
		"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º " + hitalic("(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)") + " –ù–û–í–´–ô —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø—ã " + hitalic("(—á–∞—Ç—ã)") + ", –æ—Ç–∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.",
		"",
		hitalic("‚ñ™Ô∏è –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: ") + hcode("https://t.me/+6WpLeUmqOQA1ZDgy"),
		hitalic("‚ñ™Ô∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã."),
		hitalic("‚ñ™Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Å –ø—É–±–ª–∏—á–Ω—ã—Ö."),
		])
	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å']]))
	await StatesEditValue.get_trackedGroup.set()

async def update_tracked_groups(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text == '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å':
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
		return
	if await is_valid_url(message.text.split()):
		await db.update_tracked_groups(chat_id = user_info['chat_id'], value = message.text.split())
		text = '\n'.join([
			hbold("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
			])
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
		return
	else:
		await message.reply(text = hbold("üí¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def edit_forTransfer(message: types.Message, db, dp, user_info, settings, state: FSMContext):
	text = '\n'.join([
		hbold("üì• –ü—Ä–∏—à–ª–∏—Ç–µ –ù–û–í–´–ï CHAT_ID –∏–ª–∏ CHANNEL_ID, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."),
		"–ü—Ä–∏–º–µ—Ä ID: " + hcode("-1001616413892"),
		"",
		"‚ùóÔ∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å " + hbold("—É—á–∞—Å—Ç–Ω–∏–∫–æ–º") + " –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ " + hbold("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") + " –≤ –∫–∞–Ω–∞–ª–µ.",
		"‚ùóÔ∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.",
		"",
		hitalic("‚ùî –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∞–¥–º.–ø—Ä–∞–≤"),
		hitalic("‚ùî –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"),
		hitalic("‚ùî –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"),
		])

	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å']]))
	await StatesEditValue.get_forTransfer.set()

async def update_forTransfer(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text == '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å':
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
		return
	if await is_valid_ID(message.text.split()):
		await db.update_forTransfer(chat_id = user_info['chat_id'], value = str(message.text.split()))
		text = '\n'.join([
			hbold("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
			])
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
		return
	else:
		await message.reply(text = hbold("üí¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n") + hitalic("(–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ID –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è. –§–æ—Ä–º–∞—Ç ID: ")+ hcode("'-1234567890000')"))

async def edit_keyWord(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	text = '\n'.join([
		hbold("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"),
		"",
		"üìÉ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤",
		])
	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å']]))
	await StatesEditValue.get_keyWord.set()

async def update_keyWord(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text:
		if message.text == '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å':
			await state.finish()
			await show_running(message, db, dp, user_info, telegram)
			return
		text = '\n'.join([
			"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
			"",
			"–í –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö, –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤:",
			"",
			f"{hcode(message.text)}"
			])
		array = []
		for word in message.text.split():
			array.append(word.lower())
		await db.update_keyWord(chat_id = user_info['chat_id'], key_word = array)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
	elif message.document.mime_type == 'text/plain':
		file_id = message.document.file_id
		file_info = await message.bot.get_file(file_id)
		file_path = file_info.file_path
		current_directory = os.getcwd()
		file_path_on_server = os.path.join(current_directory, str(user_info['chat_id']) + '.txt')
		downloaded_file = await message.bot.download_file(file_path)

		with open(file_path_on_server, 'wb') as file:
			file.write(downloaded_file.read())

		with open(file_path_on_server, 'r', encoding = "utf-8") as file:
			file_content = file.read()
			array = []
			for word in file_content.split():
				array.append(word.lower())
			text = '\n'.join([
				"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
				"",
				"–í –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö, –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤:",
				"",
				f"{hcode(file_content)}"
				])
			await db.update_keyWord(chat_id = user_info['chat_id'], key_word = array)
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def edit_key_StopWord(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	text = '\n'.join([
		hbold("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö STOP-—Å–ª–æ–≤"),
		"",
		"üìÉ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤",
		"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
		])
	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å']]))
	await StatesEditValue.get_keyStopWord.set()

async def update_key_StopWord(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text == '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å':
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
		return
	if message.text:
		array = []
		for word in message.text.split():
			array.append(word.lower())
		await db.update_keyStopWord(chat_id = user_info['chat_id'], keyStop_word = array)
		text = '\n'.join([
			"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
			"",
			"–°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
			"",
			f"{hcode(message.text)}"
			])
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await state.finish()
		await show_running(message, db, dp, user_info, telegram)
	elif message.document.mime_type == 'text/plain':
		file_id = message.document.file_id
		file_info = await message.bot.get_file(file_id)
		file_path = file_info.file_path
		current_directory = os.getcwd()
		file_path_on_server = os.path.join(current_directory, str(user_info['chat_id']) + '.txt')
		downloaded_file = await message.bot.download_file(file_path)

		with open(file_path_on_server, 'wb') as file:
			file.write(downloaded_file.read())

		with open(file_path_on_server, 'r', encoding = "utf-8") as file:
			file_content = file.read()
			text = '\n'.join([
				"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
				"",
				"–°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
				"",
				f"{hcode(file_content)}"
				])
			array = []
			for word in file_content.split():
				array.append(word.lower())
			await db.update_keyStopWord(chat_id = user_info['chat_id'], keyStop_word = array)
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
			file.close()
			os.remove(file_path_on_server)
			await state.finish()
			
			await show_running(message, db, dp, user_info, telegram)

#
# RUN INTECEPTOR
#

async def run_intecepter_bot(message: types.Message, db, dp, user_info, settings, state: FSMContext):
	bot_conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
	session_directory = settings['session_path'] + bot_conf['session_file']

	try:
		client = TelegramClient(session_directory, bot_conf['api_id'], bot_conf['api_hash'])
		await client.start()
		dp['data'] = client

		text = '\n'.join([
			hbold("‚úÖ –ë–æ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —á–∞—Ç—ã"),
			])

		await db.update_running_param(chat_id = user_info['chat_id'], active = 1)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É'],['üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏']], user_info['is_admin']))
		await register_user_telethon(client, db, message, user_info)  # RUN BOT
	except Exception as error:
		await message.answer(hbold("‚ö†Ô∏è Error: ") + hcode(str(error)))

async def register_user_telethon(client, db, message, user_info):
	bot_conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
	@client.on(events.NewMessage)
	async def my_event_handler(event):
		tracked_groups = ast.literal_eval(bot_conf['tracked_groups'])
		array = []
		for item in tracked_groups:
			try:
				chat_info = await client.get_entity(item.split('https://t.me/')[1])
				chat_info = await client.get_entity(chat_info)
				array.append("-100" + str(chat_info.id))
			except Exception as e:
				print(f"–û—à–∏–±–∫–∞: {e}")
		await handle_new_message(client, event, db, array, message, user_info)

async def handle_new_message(client, event, db, tracked_groups, message, user_info):
	bot_conf = await db.get_settings_byUser(chat_id = user_info['chat_id'])
	if str(event.chat_id) in tracked_groups:
		dialogs = await client.get_dialogs()
		for dialog in dialogs:
			channel_id = "-100" + str(event.peer_id.channel_id)
			if str(dialog.id) == str(channel_id):
				consilience = await check_key_word(event.message.message, bot_conf)
				if consilience:
					if event.message.from_id == None:
						sender_info = await client.get_entity(event.peer_id.channel_id)
						if sender_info.scam == False:
							text_message = event.message.message.split()
							text_message = ' '.join(text_message[:15])
							
							keyboard = types.InlineKeyboardMarkup()
							keyboard.add(types.InlineKeyboardButton("Message in the channel", url = "t.me/" + str(dialog.entity.username) + "/" + str(event.id)))

							text = '\n'.join([
								hbold("üìÆ –°hannel: ") + str(dialog.name),
								hbold("üÜî Chat ID: ") + hcode(str(dialog.id)),
								"",
								hbold("üìù Message: ") + hitalic(text_message + "..."),
								hbold("üîë Keys: ") + " ".join((item) for item in consilience),
								])

							chats_for_transfer = ast.literal_eval(bot_conf['chats_for_transfer'])
							for chat_id in chats_for_transfer:
								await message.bot.send_message(chat_id = chat_id, text = text, reply_markup = keyboard, disable_web_page_preview = True)
					else:
						sender_info = await client.get_entity(event.message.from_id)
						if await uniqueness_check(chat_id = sender_info.id, unique_users = await db.get_all_unique(), settings_id = bot_conf['id']) == True:
							if sender_info.bot == False and sender_info.scam == False:
								await db.add_new_unique_user(chat_id = sender_info.id, settings_id = bot_conf['id'], _from = dialog.name, url = "t.me/" + str(dialog.entity.username) + "/" + str(event.id))

								text_message = event.message.message.split()
								text_message = ' '.join(text_message[:15])
								
								keyboard = types.InlineKeyboardMarkup()
								keyboard.add(types.InlineKeyboardButton("Message in the chat", url = "t.me/" + str(dialog.entity.username) + "/" + str(event.id)))

								text = '\n'.join([
									hbold("üí¨ Chat Name: ") + str(dialog.name),
									hbold("üÜî Chat ID: ") + hcode(str(dialog.id)),
									"",
									hbold("üë§ Sender Name: ") + str(sender_info.first_name),
									hbold("#Ô∏è‚É£ User ID: ") + hcode(str(sender_info.id)),
									hbold("üßëüèª‚Äçüíª Username: ") + "@" + str(sender_info.username),
									hbold("‚òéÔ∏è Phone: ") + hcode(str(sender_info.phone)),
									"",
									hbold("üìù Message: ") + hitalic(text_message + "..."),
									hbold("üîë Keys: ") + " ".join((item) for item in consilience),
									])

								chats_for_transfer = ast.literal_eval(bot_conf['chats_for_transfer'])
								for chat_id in chats_for_transfer:
									await message.bot.send_message(chat_id = chat_id, text = text, reply_markup = keyboard, disable_web_page_preview = True)

async def stop_intecepter_bot(message: types.Message, db, dp, user_info, settings, telegram):
	if dp['data']:
		client = dp['data']
		await client.disconnect()

	await db.update_running_param(chat_id = user_info['chat_id'], active = 0)
	text = '\n'.join([
		("‚è∏ –†–∞–±–æ—Ç–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"),
		])

	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç'], ['üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏']], user_info['is_admin']))
	return

#
# SETTINGS INTECEPTOR
#

async def activate_token(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	text = '\n'.join([
		hbold("üîí –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"),
		"",
		hitalic("–§–æ—Ä–º–∞—Ç: ") + hcode("XXXXXXXX-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"),
		])

	await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['–ó–∞–≤–µ—Ä—à–∏—Ç—å']])) 
	await StatesActivate.get_token.set()

async def check_valide_token(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text:
		if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
			await state.finish()
			await command_start(message, db, dp, user_info, telegram)
			return

		if message.text == "/start":
			await message.reply(text = hbold("‚ùóÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"))
			return

		if await is_valid_token(message.text):
			if await db.check_token_authenticity(message.text):
				msg = await message.bot.send_message(chat_id = user_info['chat_id'], text = "üîê", reply_markup = types.ReplyKeyboardRemove())
				await asyncio.sleep(1.8)
				text = '\n'.join([
					hbold("üîì –¢–æ–∫–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"),
					"",
					"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º " + hitalic("(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)") + " —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø—ã " + hitalic("(—á–∞—Ç—ã)") + ", –æ—Ç–∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.",
					"",
					hitalic("‚ñ™Ô∏è –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: ") + hcode("https://t.me/+6WpLeUmqOQA1ZDgy"),
					hitalic("‚ñ™Ô∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã."),
					hitalic("‚ñ™Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Å –ø—É–±–ª–∏—á–Ω—ã—Ö."),
					])
				await message.bot.delete_message(chat_id = user_info['chat_id'], message_id = msg.message_id)
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text, disable_web_page_preview = True)
				async with state.proxy() as array:
					array['token'] = message.text
				await StatesActivate.get_group.set()
			else:
				await message.reply(text = hbold("üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
				await state.finish()
				await command_start(message, db, dp, user_info, telegram)
				return
		else:
			await message.reply(text = hbold("üí¢ –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞.\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."))
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\nTOKEN - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"))

async def get_group_links(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text:
		if message.text == "/start":
			await message.reply(text = hbold("‚ùóÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"))
			return

		if message.text == "https://t.me/username":
			await message.reply(text = hbold("‚ùóÔ∏è –≠—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–ª—É–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–æ–º.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))
			return

		if await is_valid_url(message.text.split()):
			url_list = ""
			for url in message.text.split():
				url_list += "üìé " + hcode("t.me/") + url.split('t.me/')[1] + "\n"
			
			text = '\n'.join([
				hbold("‚úÖ –°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã | –í—Å–µ–≥–æ: " + str(len(message.text.split()))),
				"",
				f"{url_list}",
				])

			msg = await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
			
			text = '\n'.join([
				hbold("üì• –ü—Ä–∏—à–ª–∏—Ç–µ CHAT_ID –∏–ª–∏ CHANNEL_ID, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."),
				"–ü—Ä–∏–º–µ—Ä ID: " + hcode("-1001616413892"),
				"",
				"‚ùóÔ∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å " + hbold("—É—á–∞—Å—Ç–Ω–∏–∫–æ–º") + " –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ " + hbold("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") + " –≤ –∫–∞–Ω–∞–ª–µ.",
				"‚ùóÔ∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.",
				"",
				hitalic("‚ùî –ë–æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∞–¥–º.–ø—Ä–∞–≤"),
				hitalic("‚ùî –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"),
				hitalic("‚ùî –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ"),
				])
			await asyncio.sleep(2)
			msg = await message.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = "üì§")
			await asyncio.sleep(2.2)
			await message.bot.edit_message_text(chat_id = user_info['chat_id'], message_id = msg.message_id, text = text)

			async with state.proxy() as array:
				array['groups'] = message.text.split()
			await StatesActivate.get_chatID.set()
		else:
			await message.reply(text = hbold("üí¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_chatId_receiver(message: types.Message, db, dp, user_info, telegram, state: FSMContext):
	if message.text:
		if message.text == "/start":
			await message.reply(text = hbold("‚ùóÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"))
			return

		if message.text == "-1001616413892":
			await message.reply(text = hbold("‚ùóÔ∏è –≠—Ç–æ—Ç CHAT_ID —Å–ª—É–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–æ–º.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))
			return
		if await is_valid_ID(message.text.split()):
			active_chats = await check_rights_bot(message.text.split(), message)
			if active_chats:
				chats = ""
				for item in active_chats:
					emoji = "üí¨ " if item['type'] == "supergroup" else "üìÆ "
					chats += emoji + "'" + hbold(item['title']) + "'" + " " + hitalic("(" + item['type'] + ")\n")
				text = '\n'.join([
					hbold("‚úÖ –ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"),
					"",
					"–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤:",
					"",
					f"{chats}",
					])
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
				async with state.proxy() as array:
					array['chat_id'] = message.text.split()
					array['chat_title'] = "".join((item['title']) for item in active_chats)
				text = '\n'.join([
					hbold("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"),
					"",
					"üìÉ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤",
					])
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
				await StatesActivate.get_keyword.set()
			else:
				await message.reply(text = hbold("‚õîÔ∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º!\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))
		else:
			await message.reply(text = hbold("üí¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n") + hitalic("(–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ID –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è. –§–æ—Ä–º–∞—Ç ID: ")+ hcode("'-1234567890000')"))

	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_key_word(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.text:
		text = '\n'.join([
			"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
			"",
			"–í –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö, –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤:",
			"",
			f"{hcode(message.text)}"
			])
		async with state.proxy() as array:
			array['key_word'] = []
			for word in message.text.split():
				array['key_word'].append(word.lower())
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)

		text = '\n'.join([
			hbold("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö STOP-—Å–ª–æ–≤"),
			"",
			"üìÉ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤",
			"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
			])
		await asyncio.sleep(1)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await StatesActivate.get_stopWord.set()

	elif message.document.mime_type == 'text/plain':
		file_id = message.document.file_id
		file_info = await message.bot.get_file(file_id)
		file_path = file_info.file_path
		current_directory = os.getcwd()
		file_path_on_server = os.path.join(current_directory, str(user_info['chat_id']) + '.txt')
		downloaded_file = await message.bot.download_file(file_path)

		with open(file_path_on_server, 'wb') as file:
			file.write(downloaded_file.read())

		with open(file_path_on_server, 'r', encoding = "utf-8") as file:
			file_content = file.read()
			text = '\n'.join([
				"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
				"",
				"–í –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø–∞—Ö, –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤:",
				"",
				f"{hcode(file_content)}"
				])
		async with state.proxy() as array:
			array['key_word'] = []
			for word in file_content.split():
				array['key_word'].append(word.lower())
			print(array['key_word'])
		try:
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		except:
			pass
		os.remove(file_path_on_server)
		text = '\n'.join([
			hbold("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö STOP-—Å–ª–æ–≤"),
			"",
			"üìÉ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤",
			"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
			])
		
		await asyncio.sleep(1)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await StatesActivate.get_stopWord.set()
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_stop_word(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.text:
		text = '\n'.join([
			"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
			"",
			"–°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
			"",
			f"{hcode(message.text)}"
			])
		async with state.proxy() as array:
			array['stop_word'] = []
			for word in message.text.split():
				array['stop_word'].append(word.lower())
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)

		text = '\n'.join([
			hbold("üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ API_ID –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º")
			])
		await asyncio.sleep(1)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await StatesActivate.get_apiID.set()
	elif message.document.mime_type == 'text/plain':
		file_id = message.document.file_id
		file_info = await message.bot.get_file(file_id)
		file_path = file_info.file_path
		current_directory = os.getcwd()
		file_path_on_server = os.path.join(current_directory, str(user_info['chat_id']) + '.txt')
		downloaded_file = await message.bot.download_file(file_path)

		with open(file_path_on_server, 'wb') as file:
			file.write(downloaded_file.read())

		with open(file_path_on_server, 'r', encoding = "utf-8") as file:
			file_content = file.read()
			text = '\n'.join([
				"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
				"",
				"–°–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö —Å–ª–æ–≤, –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã",
				"",
				f"{hcode(file_content)}"
				])
		async with state.proxy() as array:
			array['stop_word'] = []
			for word in file_content.split():
				array['stop_word'].append(word.lower())
		try:
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		except:
			pass
		os.remove(file_path_on_server)
		text = '\n'.join([
			hbold("üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ API_ID –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º")
			])
		await asyncio.sleep(1)
		await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
		await StatesActivate.get_apiID.set()
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_apiID(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.text:
		if message.text.isdecimal():
			async with state.proxy() as array:
				array['api_id'] = message.text
				text = '\n'.join([
					hbold("#Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤—å—Ç–µ API_HASH –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º"),
					])
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
				await StatesActivate.get_api_hash.set()
		else:
			await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. API ID –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Å–∏–º–≤–æ–ª—ã"))
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_api_hash(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.text:
		async with state.proxy() as array:
			array['api_hash'] = message.text
			text = '\n'.join([
				hbold("üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"),
				"",
				"üë§ –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ö–ª–∏–µ–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º",
				"",
				"üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ " + hbold(".session") + " —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
				])
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text)
			await StatesActivate.get_session.set()
	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç.\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def get_session(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.document.mime_type == 'application/vnd.sqlite3':
		file_id = message.document.file_id
		file_info = await message.bot.get_file(file_id)
		file_path = file_info.file_path
		current_directory = os.getcwd()
		file_path_on_server = os.path.join(settings['session_path'], message.document.file_name)
		downloaded_file = await message.bot.download_file(file_path)
		with open(file_path_on_server, 'wb') as file:
			file.write(downloaded_file.read())
			file.close()

		async with state.proxy() as array:
			array['session_file'] = message.document.file_name
			text = '\n'.join([
				hbold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"),
				"",
				"üì§ –û—Ç–∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è:",
				"\n".join(hcode(str(group)) for group in array['groups']),
				"üì• –ö—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å:",
				" ".join(hcode(str(chatID)) for chatID in array['chat_id']),
				" ".join(hitalic(str(item)) for item in array['chat_title']),
				"",
				"üîé –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - " + hcode("".join(str(len(array['key_word'])))) + hitalic(' —Å–ª–æ–≤'),
				"üõë –°–ø–∏—Å–æ–∫ –∫–ª—é—á.—Å—Ç–æ–ø-—Å–ª–æ–≤ - " + hcode("".join(str(len(array['stop_word'])))) + hitalic(' —Å–ª–æ–≤'),
				"",
				"ü§ñ –°–µ—Å—Å–∏—è –ö–ª–∏–µ–Ω—Ç–∞ - " + hcode(str(message.document.file_name)),
				"",
				"üÜî API_ID: " + hcode(str(array['api_id'])),
				"#Ô∏è‚É£  API_HASH: " + hcode(str(array['api_hash'])),
				])
			await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É']]))
			await StatesActivate.save_settings.set()

	else:
		await message.reply(text = hbold("üí¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\nüìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .session\n") + hitalic("‚òùÔ∏è (–°–ª–µ–¥—É–π—Ç–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)"))

async def save_settings(message: types.Message, db, dp, user_info, telegram, settings, state: FSMContext):
	if message.text:
		if message.text == "/start":
			await message.reply(text = hbold("‚ùóÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"))
			return
		if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É":
			async with state.proxy() as array:
				try:
					await db.add_new_settings(chat_id = user_info['chat_id'], token = array['token'], tracked_groups = array['groups'], chats_for_transfer = array['chat_id'], key_word = array['key_word'], keyStop_word = array['stop_word'], session_file = array['session_file'], api_id = array['api_id'], api_hash = array['api_hash'])
					tokenID = await db.get_idToken(token = array['token'])
					await db.update_user_tokenID(token_id = tokenID['id'], chat_id = user_info['chat_id'])
				except Exception as error:
					print(error)

				text = '\n'.join([
					"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
					"",
					"üí° –¢–æ–∫–µ–Ω-–¥–æ—Å—Ç—É–ø–∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
					"‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç 30 –¥–Ω–µ–π.",
					])
				await message.bot.send_message(chat_id = user_info['chat_id'], text = text, reply_markup = keyboard_gen([['/start']]))
				await state.finish()
				return
	else:
		await message.reply(text = hitalic("üëá (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É)"))


def register_user(dp: Dispatcher):
	dp.register_message_handler(command_start, CommandStart(), IsPrivate())
	dp.register_message_handler(run_intecepter_bot, IsPrivate(), text = "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç")
	dp.register_message_handler(stop_intecepter_bot, IsPrivate(), text = "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")

	# settings inteceptor
	dp.register_message_handler(activate_token, IsPrivate(), text = "üîê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
	dp.register_message_handler(check_valide_token, IsPrivate(), state = StatesActivate.get_token, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_group_links, IsPrivate(), state = StatesActivate.get_group, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_chatId_receiver, IsPrivate(), state = StatesActivate.get_chatID, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_key_word, IsPrivate(), state = StatesActivate.get_keyword, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_stop_word, IsPrivate(), state = StatesActivate.get_stopWord, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_apiID, IsPrivate(), state = StatesActivate.get_apiID, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_api_hash, IsPrivate(), state = StatesActivate.get_api_hash, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(get_session, IsPrivate(), state = StatesActivate.get_session, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(save_settings, IsPrivate(), state = StatesActivate.save_settings, content_types = types.ContentTypes.ANY)

	# edit settings
	dp.register_message_handler(settings_bot, IsPrivate(), state = "*", text = "üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
	dp.register_message_handler(edit_tracked_groups, IsPrivate(), state = "*", text = "‚ñ™Ô∏è –û—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å")
	dp.register_message_handler(update_tracked_groups, IsPrivate(), state = StatesEditValue.get_trackedGroup, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(edit_forTransfer, IsPrivate(), state = "*", text = "‚ñ™Ô∏è –ö—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å")
	dp.register_message_handler(update_forTransfer, IsPrivate(), state = StatesEditValue.get_forTransfer, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(edit_keyWord, IsPrivate(), state = "*", text = "‚ñ™Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
	dp.register_message_handler(update_keyWord, IsPrivate(), state = StatesEditValue.get_keyWord, content_types = types.ContentTypes.ANY)
	dp.register_message_handler(edit_key_StopWord, IsPrivate(), state = "*", text = "‚ñ™Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á-—Å—Ç–æ–ø-—Å–ª–æ–≤")
	dp.register_message_handler(update_key_StopWord, IsPrivate(), state = StatesEditValue.get_keyStopWord, content_types = types.ContentTypes.ANY)
	# handlers admin
	dp.register_message_handler(command_start, IsPrivate(), text = "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")



	# dev t.me/cayse